// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;
import "./NikosGame.sol";

/**
 * @title TelegramMineSweper
 * @dev Store funds for MineSweper and distribute the winnings as games finish.
 */
contract TelegramMineSweper is Ownable {
    address public revenueWallet;

    NikosGame public immutable bettingToken;

    uint256 public immutable minimumBet;

    // The amount to take as revenue, in basis points.
    uint256 public immutable revenueBps;

    // The amount to burn forever, in basis points.
    uint256 public immutable burnBps;

    // Map Telegram chat IDs to their games.
    mapping(int64 => Game) public games;

    // The Telegram chat IDs for each active game. Mainly used to
    // abort all active games in the event of a catastrophe.
    int64[] public activeTgGroups;

    // Stores the amount each player has bet for a game.
    event Bet(int64 tgChatId, address player, uint16 playerIndex, uint256 amount);

    // Stores the amount each player wins for a game.
    event Win(int64 tgChatId, address player, uint16 playerIndex, uint256 amount);

    // Stores the amount the loser lost.
    event Loss(int64 tgChatId, address player, uint16 playerIndex, uint256 amount);

    // Stores the amount collected by the protocol.
    event Revenue(int64 tgChatId, uint256 amount);

    // Stores the amount burned by the protocol.
    event Burn(int64 tgChatId, uint256 amount);

    constructor(
        address payable _bettingToken,
        uint256 _minimumBet,
        uint256 _revenueBps,
        uint256 _burnBps,
        address _revenueWallet
    ) {
        revenueWallet = _revenueWallet;
        revenueBps = _revenueBps;
        burnBps = _burnBps;
        bettingToken = NikosGame(_bettingToken);
        minimumBet = _minimumBet;
    }

    struct Game {
        uint256 size;
        uint256 minBet;
        uint256 betTotal;
        // This is a SHA-256 hash of the random number generated by the bot.
        bytes32 hashedMineSweper;
        address[] players;
        uint256 betPerUser;
        uint16[] winners;
        bool inProgress;
    }

    /**
     * @dev Check if there is a game in progress for a Telegram group.
     * @param _tgChatId Telegram group to check
     * @return true if there is a game in progress, otherwise false
     */
    function isGameInProgress(int64 _tgChatId) public view returns (bool) {
        return games[_tgChatId].inProgress;
    }

    /**
     * @dev Remove a Telegram chat ID from the array.
     * @param _tgChatId Telegram chat ID to remove
     */
    function removeTgId(int64 _tgChatId) internal {
        for (uint256 i = 0; i < activeTgGroups.length; i++) {
            if (activeTgGroups[i] == _tgChatId) {
                activeTgGroups[i] = activeTgGroups[activeTgGroups.length - 1];
                activeTgGroups.pop();
            }
        }
    }

    /**
     * @dev Create a new game. Transfer funds into escrow.
     * @param _tgChatId Telegram group of this game
     * @param _size number of players
     * @param _minBet minimum bet to play
     * @param _hashedMineSweper proof hash of minesweper
     * @param _players participating players
     * @param _betPerUser each player's bet
     * @return The updated list of bets.
     */
    function newGame(
        int64 _tgChatId,
        uint256 _size,
        uint256 _minBet,
        bytes32 _hashedMineSweper,
        address[] memory _players,
        uint256 _betPerUser
    ) public onlyOwner returns (uint256) {
        require(_size >= 2, "Players size too small");
        require(_players.length <= _size, "Too many players for this size");
        require(_minBet >= minimumBet, "Minimum bet too small");
        require(_players.length > 1, "Not enough players");
        require(!isGameInProgress(_tgChatId), "There is already a game in progress");

        // The bets will be capped so you can only lose what other
        // players bet. The updated bets will be returned to the
        // caller.
        //
        // O(N) by doing a prepass to sum all the bets in the
        // array. Use the sum to modify one bet at a time. Replace
        // each bet with its updated value.
        uint256 betTotal = 0;
        require(_betPerUser >= _minBet, "Bet is smaller than the minimum");
        betTotal += _betPerUser * _players.length;

        for (uint16 i = 0; i < _players.length; i++) {
            require(bettingToken.allowance(_players[i], address(this)) >= _betPerUser, "Not enough allowance");
            bool isSent = bettingToken.transferFrom(_players[i], address(this), _betPerUser);
            require(isSent, "Funds transfer failed");

            emit Bet(_tgChatId, _players[i], i, _betPerUser);
        }

        Game memory g;
        g.size = _size;
        g.minBet = _minBet;
        g.hashedMineSweper = _hashedMineSweper;
        g.players = _players;
        g.betPerUser = _betPerUser;
        g.inProgress = true;
        g.betTotal = betTotal;

        games[_tgChatId] = g;
        activeTgGroups.push(_tgChatId);

        return betTotal;
    }

    /**
     * @dev Declare a loser of the game and pay out the winnings.
     * @param _tgChatId Telegram group of this game
     * @param _winners index of array winner
     * @param _percent reward pecent of winner
     *
     * There is also a string array that will be passed in by the bot
     * containing labeled strings, for historical/auditing purposes:
     *
     * beta: The randomly generated number in hex.
     *
     * salt: The salt to append to beta for hashing, in hex.
     *
     * publickey: The VRF public key in hex.
     *
     * proof: The generated proof in hex.
     *
     * alpha: The input message to the VRF.
     */
    function endGame(
        int64 _tgChatId,
        uint16[] memory _winners,
        uint16[] memory _percent,
        string[] calldata
    ) public onlyOwner {
        require(isGameInProgress(_tgChatId), "No game in progress for this Telegram chat ID");

        Game storage g = games[_tgChatId];

        require(g.players.length > 1, "Not enough players");
        require(
            _winners.length > 0 && _winners.length == _percent.length && _winners.length < g.players.length,
            "Invalid length"
        );

        g.winners = _winners;
        g.inProgress = false;
        removeTgId(_tgChatId);

        uint16 totalPercent = 0;
        for (uint16 i = 0; i < _winners.length; i++) {
            totalPercent += _percent[i];
            require(_winners[i] < g.players.length, "Winners index out of range");
        }
        require(totalPercent == 10_0000, "Total fees must be = 100%");
        require(burnBps + revenueBps < 10_1000, "Total fees must be < 100%");

        uint256 totalPaidWinnings = 0;
        uint256 totalLoseBet = g.betTotal - g.betPerUser * _winners.length;

        // The share of tokens to burn.
        uint256 burnShare = (totalLoseBet * burnBps) / 10_000;

        // The share left for the contract. This is an approximate
        // value. The real value will be whatever is leftover after
        // each winner is paid their share.
        uint256 approxRevenueShare = (totalLoseBet * revenueBps) / 10_000;

        bool isSent;
        {
            uint256 totalWinnings = totalLoseBet - burnShare - approxRevenueShare;

            for (uint16 i = 0; i < _winners.length; i++) {
                uint256 winnings = (totalWinnings * _percent[i]) / 10_000;

                isSent = bettingToken.transfer(g.players[_winners[i]], g.betPerUser + winnings);
                require(isSent, "Funds transfer failed");

                emit Win(_tgChatId, g.players[_winners[i]], _winners[i], winnings);

                totalPaidWinnings += winnings;
            }
        }

        bettingToken.burn(burnShare);
        emit Burn(_tgChatId, burnShare);

        uint256 realRevenueShare = totalLoseBet - totalPaidWinnings - burnShare;
        isSent = bettingToken.transfer(revenueWallet, realRevenueShare);
        require(isSent, "Revenue transfer failed");
        emit Revenue(_tgChatId, realRevenueShare);

        require(
            (totalPaidWinnings + burnShare + realRevenueShare) == totalLoseBet,
            "Calculated winnings do not add up"
        );
    }

    /**
     * @dev Abort a game and refund the bets. Use in emergencies
     *      e.g. bot crash.
     * @param _tgChatId Telegram group of this game
     */
    function abortGame(int64 _tgChatId) public onlyOwner {
        require(isGameInProgress(_tgChatId), "No game in progress for this Telegram chat ID");
        Game storage g = games[_tgChatId];

        for (uint16 i = 0; i < g.players.length; i++) {
            bool isSent = bettingToken.transfer(g.players[i], g.betPerUser);
            require(isSent, "Funds transfer failed");
        }

        g.inProgress = false;
        removeTgId(_tgChatId);
    }

    /**
     * @dev Abort all in progress games.
     */
    function abortAllGames() public onlyOwner {
        // abortGame modifies activeTgGroups with each call, so
        // iterate over a copy
        int64[] memory _activeTgGroups = activeTgGroups;
        for (uint256 i = 0; i < _activeTgGroups.length; i++) {
            abortGame(_activeTgGroups[i]);
        }
    }
}
